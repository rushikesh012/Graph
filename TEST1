//Backspace problem




import java.util.*;
public class Solution {
      public static String backspace(String S){
       Stack<Character> q = new Stack<Character>();
 
    for (int i = 0; i < S.length(); ++i)
    {
        if (S.charAt(i) != '#')
            q.push(S.charAt(i));
        else if (!q.isEmpty())
            q.pop();
    }
 
   
    String ans = "";
 
    while (!q.isEmpty())
    {
        ans += q.pop();
    }
 
   
    String answer = "";
    for(int j = ans.length() - 1; j >= 0; j--)
    {
        answer += ans.charAt(j);
    }
    return answer;
        }
}


//Check Subset

import java.util.*;
public class solution {
	
	public static boolean CheckSubset(int[] arr1, int m, int[] arr2, int n) {
		/*Your class should be named solution. 
		*Don't write main().
		*Don't take input, it is passed as function argument.
		*Don't print output.
		*Taking input and printing output is handled automatically.
		*/ 

        
         Arrays.sort(arr1);
         Arrays.sort(arr2);
        int i = 0;
        int j = 0;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++)
                if (arr2[i] == arr1[j])
                    break;
 
            if (j == m)
                return false;
        }
 
     
        return true;
	}

	
}
//------------------------------------

public class Solution {
	public static void showJumpingNos(int x) {
		PrintJumping(x);
	}

	public static void PrintJumping(int X){
		
		System.out.print("0 ");
    	for (int i = 1; i <= 9; i++) {
        	dfs(i, X);
    	}
	}

	public static void dfs(int cnum, int num){

		if (cnum > num) // base case
			return;
	
		System.out.print(cnum + " ");
	
		int l_dig = cnum % 10; // get the last digit of current number
	
		// for the next digit we have two options
		int first = cnum * 10 + l_dig + 1;
		int second = cnum * 10 + l_dig - 1;
	
		if (l_dig == 0) // here as second option will give us a
						// -ve number we will skip it
			dfs(first, num);
		else if (l_dig == 9) // here as first option will give
							// us a -ve number we will skip it
			dfs(second, num);
		else // else we call on both the options
		{
			dfs(first, num);
			dfs(second, num);
		}
	}
}

